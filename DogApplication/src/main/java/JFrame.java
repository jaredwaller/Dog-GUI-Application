import javax.swing.*;
import javax.swing.filechooser.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.time.LocalDate;
import java.time.format.*;
import java.util.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jaredwaller
 */
public class JFrame extends javax.swing.JFrame {

    private static DefaultListModel<Dog> tempDogs = new DefaultListModel<Dog>();
    private static DefaultListModel<Dog> rentedDogs = new DefaultListModel<Dog>();
    private static DefaultListModel<Customer> customers = new DefaultListModel<Customer>();
    boolean addingNewDog = false;
    String userHome = System.getProperty("user.home") + "/Desktop" + "/Dog Application Files";
    File folder;
    
    /**
     * Creates new form JFrame
     */
    public JFrame() {
        if(System.getProperty("os.name").equalsIgnoreCase("Mac OS X"))  System.setProperty("apple.laf.useScreenMenuBar", "true");
        //System.out.println(System.getProperty("user.home"));
        initComponents();
        folder = new File(System.getProperty("user.home")+"/Desktop", "Dog Application Files");
        folder.mkdir();
        //tempDogs = DogFile.populateArray();
        lstDogs.setModel(tempDogs);
        loadFile();
        if(tempDogs.getSize() == 0)
        {
            btnRent.setEnabled(false);
        }
        lstCustomers.setModel(customers);
        lblDogsList.setText("Current Dogs");
        
    }
    
    

    JFrame(String dog_Application) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfName = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblBreed = new javax.swing.JLabel();
        tfBreed = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        tfAge = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstDogs = new javax.swing.JList<>();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnComplete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnRent = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        lblDogsList = new javax.swing.JLabel();
        lblCustomer = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstCustomers = new javax.swing.JList<>();
        lblRentals = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstRentals = new javax.swing.JList<>();
        lblRentedName = new javax.swing.JLabel();
        tfRentedName = new javax.swing.JTextField();
        lblCheckoutDate = new javax.swing.JLabel();
        tfCheckoutDate = new javax.swing.JTextField();
        tfReturnDate = new javax.swing.JTextField();
        lblReturnDate = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemOpen = new javax.swing.JMenuItem();
        menuList = new javax.swing.JMenu();
        menuItemCurrentDogs = new javax.swing.JCheckBoxMenuItem();
        menuItemRentedDogs = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dog Application");

        lblName.setLabelFor(tfName);
        lblName.setText("Name");

        lblBreed.setLabelFor(tfBreed);
        lblBreed.setText("Breed");

        lblAge.setLabelFor(tfAge);
        lblAge.setText("Age");

        lstDogs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstDogsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstDogs);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnComplete.setText("Complete");
        btnComplete.setEnabled(false);
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.setEnabled(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnRent.setText("Rent");
        btnRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRentActionPerformed(evt);
            }
        });

        btnReturn.setText("Return");
        btnReturn.setEnabled(false);
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        lblCustomer.setText("Customers");

        lstCustomers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCustomersValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstCustomers);

        lblRentals.setText("Rentals");

        lstRentals.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstRentalsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstRentals);

        lblRentedName.setLabelFor(tfRentedName);
        lblRentedName.setText("Name");

        lblCheckoutDate.setLabelFor(tfCheckoutDate);
        lblCheckoutDate.setText("CheckoutDate");

        lblReturnDate.setLabelFor(tfReturnDate);
        lblReturnDate.setText("Return Date");

        jMenu1.setText("File");

        menuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSave.setText("Save");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemSave);

        menuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuItemOpen.setText("Open");
        menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemOpen);

        menuBar.add(jMenu1);

        menuList.setText("List");

        menuItemCurrentDogs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        menuItemCurrentDogs.setSelected(true);
        menuItemCurrentDogs.setText("Current Dogs");
        menuItemCurrentDogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCurrentDogsActionPerformed(evt);
            }
        });
        menuList.add(menuItemCurrentDogs);

        menuItemRentedDogs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        menuItemRentedDogs.setText("Rented Dogs");
        menuItemRentedDogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRentedDogsActionPerformed(evt);
            }
        });
        menuList.add(menuItemRentedDogs);

        menuBar.add(menuList);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblAge)
                            .addComponent(lblBreed)
                            .addComponent(lblName)
                            .addComponent(tfName, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(tfBreed)
                            .addComponent(tfAge))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete))
                            .addComponent(btnComplete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblDogsList)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCustomer)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblReturnDate)
                                    .addComponent(lblCheckoutDate)
                                    .addComponent(lblRentedName)
                                    .addComponent(tfCheckoutDate, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                    .addComponent(tfReturnDate)
                                    .addComponent(tfRentedName)))
                            .addComponent(lblRentals))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDogsList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd)
                            .addComponent(btnDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblBreed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(tfBreed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnComplete))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAge)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnCancel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRent)
                            .addComponent(btnReturn))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomer)
                    .addComponent(lblRentals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblRentedName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfRentedName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCheckoutDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCheckoutDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblReturnDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if(!addingNewDog)
        {
            Dog currDog = tempDogs.getElementAt(lstDogs.getSelectedIndex());
            lstDogs.repaint();

            if(lstDogs.getSelectedIndex() == tempDogs.size()-1)
            {
                lstDogs.setSelectedIndex(tempDogs.size()-2);
            }else
            if(lstDogs.getSelectedIndex() == 0)
            {
                lstDogs.setSelectedIndex(1);
            }else
            {
                lstDogs.setSelectedIndex(lstDogs.getSelectedIndex()+1);
            }

            Dog newDog = tempDogs.getElementAt(lstDogs.getSelectedIndex());
            tfName.setText(newDog.getName());
            tfBreed.setText(newDog.getBreed());
            tfAge.setText(newDog.getAge());
            tempDogs.removeElement(currDog);
            lstDogs.clearSelection();
        }else
        {
            JOptionPane.showMessageDialog(frame, "Can not delete a dog while creating a new one.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        addingNewDog(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:
        if(!tfName.getText().equals("") && !tfBreed.getText().equals("") && !tfAge.getText().equals(""))
        {
            Dog newDog = new Dog(tfName.getText(), tfBreed.getText(), tfAge.getText());
            newDog.setRented("f");
            tempDogs.addElement(newDog);
            lstDogs.setSelectedIndex(tempDogs.size()-1);
            btnRent.setEnabled(true);
            saveFile(false);
            addingNewDog(false);
        }else
        {
            JOptionPane.showMessageDialog(frame, "You must fill in values for the new dog.");
        }
    }//GEN-LAST:event_btnCompleteActionPerformed

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
        saveFile(true);
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void menuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenActionPerformed
        loadFile();
    }//GEN-LAST:event_menuItemOpenActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        addingNewDog(false);
        if(tempDogs.getSize() > 0)
        {
            lstDogs.setSelectedIndex(0);
        }else
        {
            lstDogs.clearSelection();
            tfName.setText("");
            tfBreed.setText("");
            tfAge.setText("");
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRentActionPerformed
        // TODO add your handling code here:
        File file = new File(userHome, "RentedDogs.txt");
        Dog rentedDog = tempDogs.getElementAt(lstDogs.getSelectedIndex());
        
        if(!addingNewDog && !checkIfRented(rentedDog.getName()))
        {
            String renterEmail = JOptionPane.showInputDialog(frame, "Enter the renter's email:");
            LocalDate today = LocalDate.now();
            addTransaction(renterEmail, rentedDog.getID(), rentedDog.getName(), today, null);
            rentedDog.setRented("t");
            updateCurrentDogsFile(rentedDog);
            if(!renterEmail.equals(""))
            {
                try
                {
                    FileWriter fw = new FileWriter(file, true);
                    fw.write(renterEmail + "#");
                    fw.write(rentedDog.getID() + "#");
                    fw.write(rentedDog.getName() + "#");
                    fw.write(today + "#N.A.");
                    fw.write("\n");
                    fw.close();
                }
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(frame, "Could not save rental dog into file.");
                }
            }
            int index = lstDogs.getSelectedIndex();
            rentedDogs.addElement(rentedDog);
            if(lstDogs.getSelectedIndex() == tempDogs.size()-1)
            {
                lstDogs.setSelectedIndex(tempDogs.size()-2);
            }else
            if(lstDogs.getSelectedIndex() == 0)
            {
                lstDogs.setSelectedIndex(1);
            }else
            {
                lstDogs.setSelectedIndex(lstDogs.getSelectedIndex()+1);
                tfName.setText("");
                tfBreed.setText("");
                tfAge.setText("");
            }
            tempDogs.removeElementAt(index);
        }else
        {
            JOptionPane.showMessageDialog(frame, "Dog is currently rented.");
        }
    }//GEN-LAST:event_btnRentActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        Dog rentedDog = rentedDogs.getElementAt(lstDogs.getSelectedIndex());
        
        if(!addingNewDog && checkIfRented(rentedDog.getName()))
        {
            
            LocalDate today = LocalDate.now();
            rentedDog.setRented("f");
            updateCurrentDogsFile(rentedDog);
            try
            {
                updateRentedDogsFile(rentedDog);
                int index = lstDogs.getSelectedIndex();
                tempDogs.addElement(rentedDog);
                if(lstDogs.getSelectedIndex() == rentedDogs.size()-1)
                {
                    lstDogs.setSelectedIndex(rentedDogs.size()-2);
                }else
                if(lstDogs.getSelectedIndex() == 0)
                {
                    lstDogs.setSelectedIndex(1);
                }else
                {
                    lstDogs.setSelectedIndex(lstDogs.getSelectedIndex()+1);
                    tfName.setText("");
                    tfBreed.setText("");
                    tfAge.setText("");
                }
                rentedDogs.removeElementAt(index);
                JOptionPane.showMessageDialog(frame, "Dog returned.");
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(frame, "Could not save rental dog into file.");
            }
            
        }else
        {
            JOptionPane.showMessageDialog(frame, "Dog is not rented.");
        }
    }//GEN-LAST:event_btnReturnActionPerformed

    private void menuItemCurrentDogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCurrentDogsActionPerformed
        // TODO add your handling code here:
        lstDogs.setModel(tempDogs);
        lblDogsList.setText("Current Dogs");
        btnRent.setEnabled(true);
        btnReturn.setEnabled(false);
        btnAdd.setEnabled(true);
        btnDelete.setEnabled(true);
        
        if(tempDogs.getSize() == 0)
        {
            btnRent.setEnabled(false);
        }
        
        if(tempDogs.getSize() > 0) lstDogs.setSelectedIndex(0);
        else lstDogs.clearSelection();
        
        menuItemCurrentDogs.setSelected(true);
        menuItemRentedDogs.setSelected(false);
    }//GEN-LAST:event_menuItemCurrentDogsActionPerformed

    private void menuItemRentedDogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRentedDogsActionPerformed
        // TODO add your handling code here:
        lstDogs.setModel(rentedDogs);
        lblDogsList.setText("Rented Dogs");
        btnRent.setEnabled(false);
        btnReturn.setEnabled(true);
        btnAdd.setEnabled(false);
        btnDelete.setEnabled(false);
        
        if(rentedDogs.getSize() == 0)
        {
            btnReturn.setEnabled(false);
        }
        
        if(rentedDogs.getSize() > 0) lstDogs.setSelectedIndex(0);
        else lstDogs.clearSelection();
        
        menuItemRentedDogs.setSelected(true);
        menuItemCurrentDogs.setSelected(false);
    }//GEN-LAST:event_menuItemRentedDogsActionPerformed

    private void lstDogsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstDogsValueChanged
        // TODO add your handling code here:
        if(lstDogs.getSelectedIndex() != -1)
        {
            Dog currDog = lstDogs.getModel().getElementAt(lstDogs.getSelectedIndex());
            tfName.setText(currDog.getName());
            tfBreed.setText(currDog.getBreed());
            tfAge.setText(currDog.getAge());
            addingNewDog(false);
        }
        
    }//GEN-LAST:event_lstDogsValueChanged

    private void lstCustomersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCustomersValueChanged
        // TODO add your handling code here:
        Customer currCust = lstCustomers.getModel().getElementAt(lstCustomers.getSelectedIndex());
        Rental firstRental = currCust.getFirstRental();
        tfRentedName.setText(firstRental.getDogName());
        tfCheckoutDate.setText(firstRental.getCheckoutDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));
        if(firstRental.getReturnDate() != null) tfReturnDate.setText(firstRental.getReturnDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));
        if(firstRental.getReturnDate() == null) tfReturnDate.setText("");
        lstRentals.setModel(currCust.getRentals());
        addingNewDog(false);
    }//GEN-LAST:event_lstCustomersValueChanged

    private void lstRentalsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstRentalsValueChanged
        // TODO add your handling code here:
        if(lstRentals.getSelectedIndex() != -1)
        {
            Rental currRental = lstRentals.getModel().getElementAt(lstRentals.getSelectedIndex());
            tfRentedName.setText(currRental.getDogName());
            tfCheckoutDate.setText(currRental.getCheckoutDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));
            if(currRental.getReturnDate() != null) tfReturnDate.setText(currRental.getReturnDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));
            if(currRental.getReturnDate() == null) tfReturnDate.setText("");
        }
    }//GEN-LAST:event_lstRentalsValueChanged

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frame.setVisible(true);
            }
        });
    }
    
    public void addingNewDog(boolean addingNewDog) {
        if(addingNewDog)
        {
            tfName.setText("");
            tfBreed.setText("");
            tfAge.setText("");
        }
    }
    
    public boolean checkIfRented(String dogName) {
        for(int i = 0; i < rentedDogs.size(); i++)
        {
            if(rentedDogs.getElementAt(i).getName().equals(dogName)) return true;
        }
        return false;
    }
    
    public void addTransaction(String email, String dogID, String dogName, LocalDate checkoutDate, LocalDate returnDate) {
        for(int i = 0; i < customers.getSize(); i++)
        {
            //if customer exists
            if(customers.getElementAt(i).getEmail().equals(email))
            {
                if(returnDate == null) 
                {
                    Rental newRental = new Rental(dogID, dogName, checkoutDate);
                    customers.getElementAt(i).getRentals().addElement(newRental);
                    return;
                }
                else
                {
                    Rental newRental = new Rental(dogID, dogName, checkoutDate, returnDate);
                    customers.getElementAt(i).getRentals().addElement(newRental);
                    return;
                }
                
            }
        }
        
        //if customer is new
        Customer customer = new Customer(email);
        Rental newRental = new Rental(dogID, dogName, checkoutDate);
        customers.addElement(customer);
        customers.getElementAt(customers.getSize()-1).getRentals().addElement(newRental);
    }
    
    public void saveFile(boolean overwriteFile) {
        if(tempDogs.getSize() > 0)
        {
            File file = new File(userHome, "CurrentDogs.txt");
            try
            {
                FileWriter fw = new FileWriter(file, overwriteFile);
                for(int i = 0; i < tempDogs.getSize(); i++)
                {
                    Dog currDog = tempDogs.getElementAt(i);
                    fw.write(currDog.getID() + "#");
                    fw.write(currDog.getName() + "#");
                    fw.write(currDog.getBreed() + "#");
                    fw.write(currDog.getAge()+ "#");
                    fw.write(currDog.getRented());
                    fw.write("\n");
                }
                fw.close();
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(frame,e);
            }
        }
    }
    
    public void loadFile() {
        File file = new File(userHome, "CurrentDogs.txt");

        try
        {
            Scanner fr = new Scanner(file);
            tempDogs.clear();
            rentedDogs.clear();
            int lastID = 0;
            
            while(fr.hasNext())
            {
                String[] line = fr.nextLine().split("#");
                String dogID = line[0];
                String dogName = line[1];
                String dogBreed = line[2];
                String dogAge = line[3];
                String dogAvail = line[4];
                
                Dog newDog = new Dog(dogID, dogName, dogBreed, dogAge, dogAvail);
                if(dogAvail.equals("f")) 
                {
                    tempDogs.addElement(newDog);
                }
                else if(dogAvail.equals("t"))
                {
                    rentedDogs.addElement(newDog);
                }
                lastID = Integer.parseInt(dogID);
            }
            Dog.setCount(lastID);
            fr.close();
            
            if(tempDogs != null)
            {
                tfName.setText(tempDogs.getElementAt(0).getName());
                tfBreed.setText(tempDogs.getElementAt(0).getBreed());
                tfAge.setText(tempDogs.getElementAt(0).getAge());
            }
            
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(frame, "Could not load the dogs database.");
        }
        
        File file2 = new File(userHome, "RentedDogs.txt");
        try
        {
            Scanner fr2 = new Scanner(file2);
            while(fr2.hasNext())
            {
                String[] line = fr2.nextLine().split("#");
                
                
                if(line[4].equals("N.A."))
                {
                    addTransaction(line[0],line[1], line[2], LocalDate.parse(line[3]),null);
                }
                else
                {
                    addTransaction(line[0], line[1], line[2], LocalDate.parse(line[3]), LocalDate.parse(line[4]));
                }
                
            }
            if(customers != null) 
            {
                Customer firstCust = customers.getElementAt(0);
                Rental firstRental = firstCust.getFirstRental();
                lstRentals.setModel(firstCust.getRentals());
                tfRentedName.setText(firstRental.getDogName());
                tfCheckoutDate.setText(firstRental.getCheckoutDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));
                if(firstRental.getReturnDate() != null) tfReturnDate.setText(firstRental.getReturnDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));
                if(firstRental.getReturnDate() == null) tfReturnDate.setText("");
            }
            fr2.close();
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(frame, "Could not load customer database.");
        }
    }
    
    public void updateRentedDogsFile(Dog dog) {
        LocalDate today = LocalDate.now();
        try
        {
            File file = new File(userHome, "RentedDogs.txt");
            File tempFile = new File(userHome, "tempFile.txt");
            Scanner fr = new Scanner(file);
            FileWriter fw = new FileWriter(tempFile);

            while(fr.hasNext())
            {
                String line = fr.nextLine();
                fw.write(line+"\n");
            }
            fr.close();
            fw.close();

            Scanner copierFR = new Scanner(tempFile);
            FileWriter copierFW = new FileWriter(file);
            while(copierFR.hasNext())
            {
                String[] line = copierFR.nextLine().split("#");
                if(line[1].equals(dog.getID()))
                {
                    for(int i = 0; i < 4; i++)
                    {
                        copierFW.write(line[i] + "#");
                    }
                    copierFW.write(today + "\n");

                }else
                {
                    for(int i = 0; i < 4; i++)
                    {
                        copierFW.write(line[i] + "#");
                    }
                    copierFW.write(line[4] + "\n");
                }
            }

            copierFR.close();
            copierFW.close();
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(frame, "Could not save file.");
        }
    }
    
    public void updateCurrentDogsFile(Dog dog) {
        try
        {
            File file = new File(userHome, "CurrentDogs.txt");
            File tempFile = new File(userHome, "tempFile.txt");
            Scanner fr = new Scanner(file);
            FileWriter fw = new FileWriter(tempFile);

            while(fr.hasNext())
            {
                String line = fr.nextLine();
                fw.write(line + "\n");
            }
            fr.close();
            fw.close();

            Scanner copierFR = new Scanner(tempFile);
            FileWriter copierFW = new FileWriter(file);
            while(copierFR.hasNext())
            {
                String[] line = copierFR.nextLine().split("#");
                if(line[0].equals(dog.getID()))
                {
                    for(int i = 0; i < 4; i++)
                    {
                        copierFW.write(line[i] + "#");
                    }
                    copierFW.write(dog.getRented() + "\n");

                }else
                {
                     for(int i = 0; i < 4; i++)
                    {
                        copierFW.write(line[i] + "#");
                    }
                    copierFW.write(line[4] + "\n");
                }
            }

            copierFR.close();
            copierFW.close();
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(frame, "Could not save file.");
        }
    }
    
   

    private static javax.swing.JFrame frame = new JFrame();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRent;
    private javax.swing.JButton btnReturn;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblBreed;
    private javax.swing.JLabel lblCheckoutDate;
    private javax.swing.JLabel lblCustomer;
    private javax.swing.JLabel lblDogsList;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblRentals;
    private javax.swing.JLabel lblRentedName;
    private javax.swing.JLabel lblReturnDate;
    private javax.swing.JList<Customer> lstCustomers;
    private javax.swing.JList<Dog> lstDogs;
    private javax.swing.JList<Rental> lstRentals;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JCheckBoxMenuItem menuItemCurrentDogs;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JCheckBoxMenuItem menuItemRentedDogs;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenu menuList;
    private javax.swing.JTextField tfAge;
    private javax.swing.JTextField tfBreed;
    private javax.swing.JTextField tfCheckoutDate;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfRentedName;
    private javax.swing.JTextField tfReturnDate;
    // End of variables declaration//GEN-END:variables
}
